{"version":3,"file":"tasksList.bundle.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,kCAAkC,sBAAsB;AACxD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE;AACA;AACA,kCAAkC,iCAAiC;AACnE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wDAAwD,EAAE;AACnE;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,gCAAgC,UAAU;AAC1C;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD,gCAAgC,cAAc;AAC9C,+BAA+B,SAAS;AACxC;AACA;AACA,KAAK;AACL,GAAG;AACH,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD","sources":["webpack://waraqah-wa-qalam/./src/taskListModule.js"],"sourcesContent":["// Information holder object that collects all information needed for new task\r\nconst newTaskInfo = {\r\n  newTaskName: \"\",\r\n  newTaskDescription: \"\",\r\n  newTaskStartingDate: \"\",\r\n  newTaskDueDate: \"\",\r\n  newTaskETC: \"\",\r\n  newTaskGroup: \"\",\r\n  newTaskPriority: \"\",\r\n  newTaskHomeItem: true,\r\n  newTaskSubItems: [],\r\n  greenLight: false,\r\n\r\n  getName() {\r\n    const nameFiled = document.getElementsByClassName(\"newTask-name\");\r\n    const name = nameFiled[0].value;\r\n    this.newTaskName = name;\r\n  },\r\n  getDescription() {\r\n    const descriptionFiled = document.getElementsByClassName(\r\n      \"newTask-description\"\r\n    );\r\n    const description = descriptionFiled[0].value;\r\n    this.newTaskDescription = description;\r\n  },\r\n  getStartingDate() {\r\n    const startingDateTimeFiled = document.getElementsByClassName(\r\n      \"newTask-startingDateTime\"\r\n    );\r\n    const startingDateTime = startingDateTimeFiled[0].innerText;\r\n    this.newTaskStartingDate = startingDateTime;\r\n  },\r\n  getDueDate() {\r\n    const dueDateFiled = document.getElementsByClassName(\"newTask-dueDate\");\r\n    const dueDate = dueDateFiled[0].value;\r\n    this.newTaskDueDate = `Due: ${dueDate.split(\"T\")[0]}`;\r\n  },\r\n  getETC() {\r\n    const etcFiled = document.getElementById(\"newTask-etcContainer\");\r\n    let etc = etcFiled.innerText;\r\n    etc = etc.match(/\\d+/g);\r\n    etc = +etc[0] * 24 + +etc[1] + +etc[2] / 60;\r\n    this.newTaskETC =\r\n      Math.round(etc) <= 0\r\n        ? \"ETC: Less Then Hour\"\r\n        : `ETC: ${Math.round(etc)} Hours`;\r\n  },\r\n  getGroup() {\r\n    const groupsFiled = document.getElementsByClassName(\"newTask-group\");\r\n    const group = groupsFiled[0].value;\r\n    this.newTaskGroup = group;\r\n  },\r\n  isHomeItem() {\r\n    const homeFiled = document.getElementsByName(\"newTask-addToHome\");\r\n    const home = homeFiled[0].checked;\r\n    this.newTaskHomeItem = home;\r\n  },\r\n  getSubItems() {\r\n    const notesList = document.querySelectorAll(\r\n      '[data-elementtype=\"newTask-note\"]'\r\n    );\r\n    const subTasksList = document.querySelectorAll(\r\n      '[data-elementtype=\"newTask-task\"]'\r\n    );\r\n    notesList.forEach((note) =>\r\n      this.newTaskSubItems.push({ type: \"note\", value: note.innerText })\r\n    );\r\n    subTasksList.forEach((task) =>\r\n      this.newTaskSubItems.push({ type: \"task\", value: task.value })\r\n    );\r\n  },\r\n  getPriority() {\r\n    const priorityFiled = document.getElementsByClassName(\"newTask-priority\");\r\n    const priority = priorityFiled[0].value;\r\n    this.newTaskPriority = priority;\r\n  },\r\n  getAllInfo(e) {\r\n    if (!e.target.classList.contains(\"newTask-addButton\")) return;\r\n    newTaskInfo.getName();\r\n    newTaskInfo.getPriority();\r\n    newTaskInfo.getDescription();\r\n    newTaskInfo.getDueDate();\r\n    newTaskInfo.getGroup();\r\n    newTaskInfo.getETC();\r\n    newTaskInfo.getStartingDate();\r\n    newTaskInfo.getSubItems();\r\n    newTaskInfo.isHomeItem();\r\n    if (\r\n      newTaskInfo.newTaskName !== \"\" &&\r\n      newTaskInfo.newTaskDueDate !== \"\" &&\r\n      newTaskInfo.newTaskDueDate !== \"Due: \"\r\n    ) {\r\n      newTaskInfo.greenLight = true;\r\n      e.preventDefault();\r\n      document.body.removeChild(document.querySelector(\".blackMask\"));\r\n    }\r\n  },\r\n};\r\n\r\n// Factory function that makes task objects\r\nconst listItemMaker = (listItemId) => {\r\n  let idNo = listItemId;\r\n  let name = \"\";\r\n  let description = \"\";\r\n  const startingDate = \"\";\r\n  let dueDate = \"\";\r\n  let status = false;\r\n  let ETC = \"\";\r\n  let group = \"\";\r\n  let homeItem = false;\r\n  let subItems = [];\r\n  let priority = \"\";\r\n  let workTime = \"Worked: 0 Hours\";\r\n  let stopWatchTime = 0; // In seconds\r\n  let pomodoroCount = 0;\r\n  let pomodoroLimit = 25;\r\n  let pomoBreakLimit = 5;\r\n  let pomodoroTime = 0;\r\n  let pomoBreakTime = 0;\r\n\r\n  return {\r\n    idNo,\r\n    name,\r\n    description,\r\n    startingDate,\r\n    dueDate,\r\n    status,\r\n    ETC,\r\n    homeItem,\r\n    subItems,\r\n    pomodoroCount,\r\n    stopWatchTime,\r\n    group,\r\n    pomodoroLimit,\r\n    pomoBreakLimit,\r\n    pomodoroTime,\r\n    pomoBreakTime,\r\n    priority,\r\n    workTime,\r\n  };\r\n};\r\n\r\n/* Controller object that control how the information in newTaskInfo object \r\n   and the factory function to make new tasks,\r\n   also controlling the task list by adding, removing or updating tasks. */\r\nconst listItemController = {\r\n  itemsList: [],\r\n\r\n  makeListItem() {\r\n    // Function that make new items using info stored in newTaskInfo object\r\n    const newListItem = listItemMaker(\r\n      `${newTaskInfo.newTaskName.slice(0, 3).toLocaleLowerCase()}${Math.floor(\r\n        Math.random() * 1000000\r\n      )}`\r\n    );\r\n\r\n    newListItem.name = newTaskInfo.newTaskName;\r\n    newListItem.description = newTaskInfo.newTaskDescription;\r\n    newListItem.startingDate = newTaskInfo.newTaskStartingDate;\r\n    newListItem.dueDate = newTaskInfo.newTaskDueDate;\r\n    newListItem.status = false;\r\n    newListItem.ETC = newTaskInfo.newTaskETC;\r\n    newListItem.group = newTaskInfo.newTaskGroup;\r\n    newListItem.homeItem = newTaskInfo.newTaskHomeItem;\r\n    newListItem.subItems = newTaskInfo.newTaskSubItems;\r\n    newListItem.priority = newTaskInfo.newTaskPriority;\r\n\r\n    return newListItem;\r\n  },\r\n  populateList() {\r\n    // Function that adds new tasks to the list of tasks\r\n    listItemController.itemsList.push(listItemController.makeListItem());\r\n  },\r\n  updateDomList(list) {\r\n    // Function that updates the task list on the screen\r\n    const domTasksList = document.getElementsByClassName(\"task-list\")[0];\r\n    list.forEach((item) => {\r\n      const listItem = document.createElement(\"li\");\r\n      listItem.classList.add(\"task\");\r\n      listItem.setAttribute(\"data-taskId\", item.idNo);\r\n      listItem.innerHTML = `\r\n      <div class=\"taskRemovalContainer\"></div>\r\n      <span class=\"task-group\">\r\n        ${item.group}\r\n      </span>\r\n      <span class=\"task-name\">${item.name}</span>\r\n      <input type=\"checkbox\" name=\"task-completion-status\" id=\"task-completion-status\" />\r\n      <span class=\"task-brief\">${item.description}</span>\r\n      <div class=\"task-toolBox\">\r\n        <div class=\"stopWatch-button\"></div>\r\n        <div class=\"pomo-button\"></div>\r\n      </div>\r\n      <span class=\"task-dueDate\">${item.dueDate}</span>\r\n      <span class=\"task-time\">${item.workTime}</span>\r\n      <span class=\"task-ect\">${item.ETC}</span>\r\n      `;\r\n      domTasksList.appendChild(listItem);\r\n    });\r\n  },\r\n  updateListItem() {},\r\n\r\n  removeItem(e) {\r\n    // Function that allows user to remove tasks\r\n    if (!e.target.classList.contains(\"taskRemovalContainer\")) return;\r\n    const taskId = e.target.parentNode.dataset.taskid;\r\n    const removedDomItem = e.target.parentNode;\r\n    removedDomItem.remove();\r\n    listItemController.itemsList = listItemController.itemsList.filter(\r\n      (item) => item.idNo != taskId\r\n    );\r\n  },\r\n  shiftDomList(e) {\r\n    // Function that change the task list.\r\n    if (e.target.classList[0] != (\"nav-item\")) return;\r\n    const group = document.getElementsByClassName(\"nav-selected\")[0].innerText;\r\n    const list = listItemController.itemsList.filter(item => listItemController.itemGroupsList(item).includes(group));\r\n    document.getElementsByClassName(\"task-list\")[0].innerHTML = \"\";\r\n    listItemController.updateDomList(list);\r\n  },\r\n  listOperator() {\r\n    // Function that determines if the task list on the screen needs to be updated or not.\r\n    const itemGroups = listItemController.itemGroupsList(\r\n      listItemController.itemsList[listItemController.itemsList.length - 1]\r\n    );\r\n    const currentGroup =\r\n      document.getElementsByClassName(\"nav-selected\")[0].innerText;\r\n    if (itemGroups.includes(currentGroup)) {\r\n      const list = [listItemController.itemsList[listItemController.itemsList.length - 1]];\r\n      listItemController.updateDomList(list);\r\n    }\r\n  },\r\n  itemGroupsList(item) {\r\n    // Function that determines all the groups one task belongs to\r\n    const staticGroup = [];\r\n    const date = new Date();\r\n    staticGroup.push(item.group);\r\n    if (item.homeItem == true) {\r\n      staticGroup.push(\"Home\");\r\n    }\r\n    if (new Date(item.dueDate).toDateString() == date.toDateString()) {\r\n      staticGroup.push(\"Today\");\r\n    }\r\n    if (\r\n      new Date(item.dueDate).toDateString() ==\r\n      date.toDateString(date.setDate(date.getDate() + 1))\r\n    ) {\r\n      staticGroup.push(\"Tomorrow\");\r\n    }\r\n    return staticGroup;\r\n  },\r\n};\r\n\r\nwindow.addEventListener(\"click\", newTaskInfo.getAllInfo);\r\nwindow.addEventListener(\"click\", listItemController.removeItem);\r\nwindow.addEventListener(\"click\", (e) => {\r\n  if (!e.target.classList.contains(\"newTask-addButton\")) return;\r\n  else if (newTaskInfo.greenLight == true) {\r\n    listItemController.populateList();\r\n    listItemController.listOperator();\r\n    newTaskInfo.greenLight = false;\r\n  }\r\n});\r\nwindow.addEventListener(\"click\", listItemController.shiftDomList);\r\n"],"names":[],"sourceRoot":""}