{"version":3,"file":"tasksList.bundle.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4CAA4C;AAC9E;AACA;AACA,kCAAkC,4CAA4C;AAC9E;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wDAAwD,EAAE;AACnE;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,kCAAkC,UAAU;AAC5C;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE,kCAAkC,cAAc;AAChD,iCAAiC,SAAS;AAC1C;AACA;AACA,KAAK;AACL,GAAG;AACH,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,2CAA2C,UAAU;AACrD,yCAAyC,kBAAkB;AAC3D;AACA;AACA,YAAY;AACZ;AACA,4DAA4D,uBAAuB;AACnF;AACA,gBAAgB,uCAAuC,EAAE;AACzD;AACA,+BAA+B,oCAAoC;AACnE;AACA,yEAAyE,cAAc;AACvF,mCAAmC,SAAS;AAC5C,yCAAyC,cAAc;AACvD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,cAAc;AACnH;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,cAAc;AACjF;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,mBAAmB;AACxH;AACA,QAAQ;AACR;AACA;AACA;AACA,oEAAoE,mBAAmB;AACvF;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6JAA6J,gBAAgB,4CAA4C,gBAAgB;AACzO,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oGAAoG,SAAS,wBAAwB,SAAS,YAAY;AAC5L;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,YAAY;AACnF;AACA;AACA;AACA;AACA;AACA,iCAAiC,wCAAwC,EAAE;AAC3E;AACA,+BAA+B,oCAAoC,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://waraqah-wa-qalam/./src/taskListModule.js"],"sourcesContent":["// Function to Capitalize words.\r\nObject.defineProperty(String.prototype, \"capitalize\", {\r\n  value: function () {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n  },\r\n  enumerable: false,\r\n});\r\n\r\nfunction noDefault(e) {\r\n  e.preventDefault()\r\n}\r\n\r\n////////////////////////////////////////\r\n//////////Tasks List Objects///////////\r\n//////////////////////////////////////\r\n\r\n// Information holder object that collects all information needed for new task\r\nconst newTaskInfo = {\r\n  newTaskName: \"\",\r\n  newTaskDescription: \"\",\r\n  newTaskStartingDate: \"\",\r\n  newTaskDueDate: \"\",\r\n  newTaskETC: \"\",\r\n  newTaskGroup: \"\",\r\n  newTaskPriority: \"\",\r\n  newTaskHomeItem: true,\r\n  newTaskSubItems: [],\r\n  greenLight: false,\r\n\r\n  getName() {\r\n    const nameFiled = document.getElementsByClassName(\"newTask-name\");\r\n    const name = nameFiled[0].value;\r\n    this.newTaskName = name;\r\n  },\r\n  getDescription() {\r\n    const descriptionFiled = document.getElementsByClassName(\r\n      \"newTask-description\"\r\n    );\r\n    const description = descriptionFiled[0].value;\r\n    this.newTaskDescription = description;\r\n  },\r\n  getStartingDate() {\r\n    const startingDateTimeFiled = document.getElementsByClassName(\r\n      \"newTask-startingDateTime\"\r\n    );\r\n    const startingDateTime = startingDateTimeFiled[0].innerText;\r\n    this.newTaskStartingDate = startingDateTime;\r\n  },\r\n  getDueDate() {\r\n    const dueDateFiled = document.getElementsByClassName(\"newTask-dueDate\");\r\n    const dueDate = dueDateFiled[0].value;\r\n    this.newTaskDueDate = dueDate;\r\n  },\r\n  getETC() {\r\n    const etcFiled = document.getElementById(\"newTask-etcContainer\");\r\n    let etc = etcFiled.innerText;\r\n    etc = etc.match(/\\d+/g);\r\n    etc = +etc[0] * 24 + +etc[1] + +etc[2] / 60;\r\n    this.newTaskETC =\r\n      Math.round(etc) <= 0\r\n        ? \"ETC: Less Then Hour\"\r\n        : `ETC: ${Math.round(etc)} Hours`;\r\n  },\r\n  getGroup() {\r\n    const groupsFiled = document.getElementsByClassName(\"newTask-group\");\r\n    const group = groupsFiled[0].value;\r\n    this.newTaskGroup = group;\r\n  },\r\n  isHomeItem() {\r\n    const homeFiled = document.getElementsByName(\"newTask-addToHome\");\r\n    const home = homeFiled[0].checked;\r\n    this.newTaskHomeItem = home;\r\n  },\r\n  getSubItems() {\r\n    const notesList = document.querySelectorAll(\r\n      '[data-elementtype=\"newTask-note\"]'\r\n    );\r\n    const subTasksList = document.querySelectorAll(\r\n      '[data-elementtype=\"newTask-task\"]'\r\n    );\r\n    subTasksList.forEach((task) =>\r\n      this.newTaskSubItems.push({ type: \"task\", value: task.innerText.trim() })\r\n    );\r\n    notesList.forEach((note) =>\r\n      this.newTaskSubItems.push({ type: \"note\", value: note.innerText.trim() })\r\n    );\r\n  },\r\n  getPriority() {\r\n    const priorityFiled = document.getElementsByClassName(\"newTask-priority\");\r\n    const priority = priorityFiled[0].value;\r\n    this.newTaskPriority = priority;\r\n  },\r\n  getAllInfo(e) {\r\n    if (!e.target.classList.contains(\"newTask-addButton\")) return;\r\n    newTaskInfo.getName();\r\n    newTaskInfo.getPriority();\r\n    newTaskInfo.getDescription();\r\n    newTaskInfo.getDueDate();\r\n    newTaskInfo.getGroup();\r\n    newTaskInfo.getETC();\r\n    newTaskInfo.getStartingDate();\r\n    newTaskInfo.getSubItems();\r\n    newTaskInfo.isHomeItem();\r\n    if (\r\n      newTaskInfo.newTaskName !== \"\" &&\r\n      newTaskInfo.newTaskDueDate !== \"\" &&\r\n      newTaskInfo.newTaskDueDate !== \"Due: \"\r\n    ) {\r\n      newTaskInfo.greenLight = true;\r\n      e.preventDefault();\r\n      document.body.removeChild(document.querySelector(\".blackMask\"));\r\n    }\r\n  },\r\n};\r\n\r\n// Factory function that makes task objects\r\nconst listItemMaker = (listItemId) => {\r\n  let idNo = listItemId;\r\n  let name = \"\";\r\n  let description = \"\";\r\n  const startingDate = \"\";\r\n  let dueDate = \"\";\r\n  let status = false;\r\n  let ETC = \"\";\r\n  let group = \"\";\r\n  let homeItem = false;\r\n  let subItems = [];\r\n  let priority = \"\";\r\n  let workTime = \"Worked: 0 Hours\";\r\n  let stopWatchTime = 0; // In seconds\r\n  let pomodoroCount = 0;\r\n  let pomodoroLimit = 25;\r\n  let pomoBreakLimit = 5;\r\n  let pomodoroTime = 0;\r\n  let pomoBreakTime = 0;\r\n\r\n  return {\r\n    idNo,\r\n    name,\r\n    description,\r\n    startingDate,\r\n    dueDate,\r\n    status,\r\n    ETC,\r\n    homeItem,\r\n    subItems,\r\n    pomodoroCount,\r\n    stopWatchTime,\r\n    group,\r\n    pomodoroLimit,\r\n    pomoBreakLimit,\r\n    pomodoroTime,\r\n    pomoBreakTime,\r\n    priority,\r\n    workTime,\r\n  };\r\n};\r\n\r\n/* Controller object that control how the information in newTaskInfo object \r\n   and the factory function to make new tasks,\r\n   also controlling the task list by adding, removing or updating tasks. */\r\nconst listItemController = {\r\n  itemsList: [],\r\n\r\n  makeListItem() {\r\n    // Function that make new items using info stored in newTaskInfo object\r\n    const newListItem = listItemMaker(\r\n      `${newTaskInfo.newTaskName.slice(0, 3).toLocaleLowerCase()}${Math.floor(\r\n        Math.random() * 1000000\r\n      )}`\r\n    );\r\n\r\n    newListItem.name = newTaskInfo.newTaskName;\r\n    newListItem.description = newTaskInfo.newTaskDescription;\r\n    newListItem.startingDate = newTaskInfo.newTaskStartingDate;\r\n    newListItem.dueDate = newTaskInfo.newTaskDueDate;\r\n    newListItem.status = false;\r\n    newListItem.ETC = newTaskInfo.newTaskETC;\r\n    newListItem.group = newTaskInfo.newTaskGroup;\r\n    newListItem.homeItem = newTaskInfo.newTaskHomeItem;\r\n    newListItem.subItems = newTaskInfo.newTaskSubItems;\r\n    newListItem.priority = newTaskInfo.newTaskPriority;\r\n    newTaskInfo.newTaskSubItems = [];\r\n    return newListItem;\r\n  },\r\n  populateList() {\r\n    // Function that adds new tasks to the list of tasks\r\n    listItemController.itemsList.push(listItemController.makeListItem());\r\n  },\r\n  updateDomList(list) {\r\n    // Function that updates the task list on the screen\r\n    const domTasksList = document.getElementsByClassName(\"task-list\")[0];\r\n    list.forEach((item) => {\r\n      const listItem = document.createElement(\"li\");\r\n      listItem.classList.add(\"task\");\r\n      listItem.setAttribute(\"data-taskId\", item.idNo);\r\n      listItem.innerHTML = `\r\n        <div class=\"taskRemovalContainer\"></div>\r\n        <span class=\"task-group\">\r\n          ${item.group}\r\n        </span>\r\n        <span class=\"task-name\">${item.name}</span>\r\n        <input type=\"checkbox\" name=\"task-completion-status\" id=\"task-completion-status\" />\r\n        <span class=\"task-brief\">${item.description}</span>\r\n        <div class=\"task-toolBox\">\r\n          <div class=\"stopWatch-button\"></div>\r\n          <div class=\"pomo-button\"></div>\r\n        </div>\r\n        <span class=\"task-dueDate\">Due: ${item.dueDate.split(\"T\")[0]}</span>\r\n        <span class=\"task-time\">${item.workTime}</span>\r\n        <span class=\"task-ect\">${item.ETC}</span>\r\n        `;\r\n      domTasksList.appendChild(listItem);\r\n    });\r\n  },\r\n  updateListItem() {},\r\n\r\n  removeItem(e) {\r\n    // Function that allows user to remove tasks\r\n    if (!e.target.classList.contains(\"taskRemovalContainer\")) return;\r\n    const taskId = e.target.parentNode.dataset.taskid;\r\n    const removedDomItem = e.target.parentNode;\r\n    removedDomItem.remove();\r\n    listItemController.itemsList = listItemController.itemsList.filter(\r\n      (item) => item.idNo != taskId\r\n    );\r\n  },\r\n  shiftDomList(e) {\r\n    // Function that change the task list.\r\n    if (e.target.classList[0] != \"nav-item\") return;\r\n    const group = document.getElementsByClassName(\"nav-selected\")[0].innerText;\r\n    const list = listItemController.itemsList.filter((item) =>\r\n      listItemController.itemGroupsList(item).includes(group)\r\n    );\r\n    document.getElementsByClassName(\"task-list\")[0].innerHTML = \"\";\r\n    listItemController.updateDomList(list);\r\n  },\r\n  listOperator() {\r\n    // Function that determines if the task list on the screen needs to be updated or not.\r\n    const itemGroups = listItemController.itemGroupsList(\r\n      listItemController.itemsList[listItemController.itemsList.length - 1]\r\n    );\r\n    const currentGroup =\r\n      document.getElementsByClassName(\"nav-selected\")[0].innerText;\r\n    if (itemGroups.includes(currentGroup)) {\r\n      const list = [\r\n        listItemController.itemsList[listItemController.itemsList.length - 1],\r\n      ];\r\n      listItemController.updateDomList(list);\r\n    }\r\n  },\r\n  itemGroupsList(item) {\r\n    // Function that determines all the groups one task belongs to\r\n    const staticGroup = [];\r\n    const date = new Date();\r\n    staticGroup.push(item.group);\r\n    if (item.homeItem == true) {\r\n      staticGroup.push(\"Home\");\r\n    }\r\n    if (new Date(item.dueDate).toDateString() == date.toDateString()) {\r\n      staticGroup.push(\"Today\");\r\n    }\r\n    if (\r\n      new Date(item.dueDate).toDateString() ==\r\n      date.toDateString(date.setDate(date.getDate() + 1))\r\n    ) {\r\n      staticGroup.push(\"Tomorrow\");\r\n    }\r\n    return staticGroup;\r\n  },\r\n};\r\n\r\n////////////////////////////////////////\r\n//////////Tasks View Objects///////////\r\n//////////////////////////////////////\r\n\r\n// Controller that is responsible for taskView functionality\r\nconst taskView = {\r\n  expand(e) {\r\n    if (e.target.classList[0] != \"task-name\") return;\r\n    const taskID = e.target.parentNode.dataset.taskid;\r\n    const item = listItemController.itemsList.filter(\r\n      (item) => item.idNo == taskID\r\n    )[0];\r\n    taskView.displayExpandedItem(item);\r\n  },\r\n  displayExpandedItem(item) {\r\n    const mask = document.createElement(\"div\");\r\n    mask.classList.add(\"blackMask\");\r\n    mask.innerHTML = `\r\n      <div class=\"taskView\" data-taskid=\"${item.idNo}\">\r\n       <div class=\"taskView-startDate\">${item.startingDate}</div>\r\n       <div class=\"taskView-group\" data-editable=\"choose\">\r\n          <div id=\"taskEdit\" title=\"Edit Task\"></div>\r\n          ${item.group}\r\n       </div>\r\n       <div class=\"taskView-name\" data-editable=\"rewrite\">${item.name.capitalize()}</div>\r\n       <div class=\"taskView-dueDate\" data-editable=\"choose\">\r\n         Due: ${new Date(item.dueDate).toDateString()} ${new Date(\r\n      item.dueDate\r\n    ).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n       </div>\r\n       <div class=\"taskView-priority\" data-editable=\"choose\">Priority: ${item.priority}</div>\r\n       <div class=\"taskView-etc\">${item.ETC}</div>\r\n       <div class=\"taskView-totalTime\">${item.workTime}</div>\r\n       <div class=\"taskView-description\">\r\n         <span id=\"desName\">Description:</span><span id=\"desText\" data-editable=\"rewrite\">${\r\n           item.description\r\n         }</span>\r\n       </div>\r\n       <div id=\"taskView-notes\">\r\n         <span id=\"notesName\">Notes: <div title=\"Add Sub Task\" id=\"addSubTasksTV\"></div>\r\n         <div title=\"Add Sub Note\" id=\"addSubNotesTV\"></div></span> \r\n         </span>\r\n         <div id=\"taskView-notesTS\"></div>\r\n         <div id=\"taskView-notesNS\"></div>\r\n       </div>\r\n     </div>\r\n    `;\r\n    document.body.appendChild(mask);\r\n    taskView.makeSubItem(item.subItems);\r\n  },\r\n  makeSubItem(subItemsList) {\r\n    const taskList = document.getElementById(\"taskView-notesTS\");\r\n    const noteList = document.getElementById(\"taskView-notesNS\");\r\n    const validationTest = /\\w/;\r\n    subItemsList.forEach((subItem) => {\r\n      if (\r\n        subItem.type == \"task\" &&\r\n        validationTest.test(subItem.value) == true\r\n      ) {\r\n        const taskNode = document.createElement(\"label\");\r\n        taskNode.innerHTML = `<div class=\"removeTVSubItem\"></div><span data-editable=\"editSubItem\">${subItem.value}</span> <input type=\"checkbox\" name=\"\" id=\"\">`;\r\n        taskList.appendChild(taskNode);\r\n      } else if (\r\n        subItem.type == \"note\" &&\r\n        validationTest.test(subItem.value) == true\r\n      ) {\r\n        const noteNode = document.createElement(\"span\");\r\n        noteNode.classList.add(\"subNoteText\");\r\n        noteNode.setAttribute(\"data-editable\", \"editSubItem\")\r\n        noteNode.innerHTML = `<div class=\"removeTVSubItem\"></div>${subItem.value}`;\r\n        noteList.appendChild(noteNode);\r\n      }\r\n    });\r\n  },\r\n  showNoteInput(e) {\r\n    // Function that allow the user to input new sub-item task or note\r\n    const notes = document.getElementById(\"taskView-notes\");\r\n    if (e.target.id == \"addSubTasksTV\") {\r\n      const taskInput = document.createElement(\"div\");\r\n      taskInput.setAttribute(\"id\", \"subTaskInputContainerTV\")\r\n      taskInput.innerHTML = `<input type=\"text\" id=\"subTaskInputTV\"><button type=\"button\" id=\"subTaskAddButtonTV\">Add Task</button>`;\r\n      taskInput.addEventListener(\"focusout\", () => setTimeout(() => {\r\n        document.getElementById(\"subTaskInputTV\").value = \"\";\r\n        taskInput.remove()\r\n      }, 150))\r\n      notes.appendChild(taskInput);\r\n      document.getElementById(\"subTaskInputTV\").focus();\r\n      document.getElementById(\"subTaskAddButtonTV\").addEventListener(\"click\", (e) => e.preventDefault());\r\n      taskView.postNote(\"subTaskInputTV\")\r\n    } else if (e.target.id == \"addSubNotesTV\") {\r\n      const noteInput = document.createElement(\"div\");\r\n      noteInput.setAttribute(\"id\", \"subTaskInputContainerTV\")\r\n      noteInput.innerHTML = `<textarea id=\"subNoteInputTV\" rows=\"4\"></textarea> <button type=\"button\" id=\"subNoteAddButtonTV\">Add Note</button>`;\r\n      noteInput.addEventListener(\"focusout\", () => setTimeout(() => {\r\n        document.getElementById(\"subNoteInputTV\").value = \"\"\r\n        noteInput.remove()\r\n      }, 150));\r\n      notes.appendChild(noteInput);\r\n      document.getElementById(\"subNoteInputTV\").focus()\r\n      taskView.postNote(\"subNoteInputTV\")\r\n    }\r\n    return;\r\n  },\r\n  postNote(id){\r\n    // Function that post a note or a task to the DOM.\r\n    const taskList = document.getElementById(\"taskView-notesTS\");\r\n    const noteList = document.getElementById(\"taskView-notesNS\");\r\n    const subItemInput = document.getElementById(id);\r\n    window.addEventListener(\"click\", (e) => {\r\n      if (e.target.id == \"subTaskAddButtonTV\" && subItemInput.value.trim() !== \"\") {\r\n        const taskNode = document.createElement(\"label\");\r\n        taskNode.innerHTML = `<div class=\"removeTVSubItem\"></div><span data-editable=\"editSubItem\">${subItemInput.value}</span> <input type=\"checkbox\" name=\"\" id=\"\">`;\r\n        taskList.appendChild(taskNode);\r\n      } else if (e.target.id == \"subNoteAddButtonTV\" && subItemInput.value.trim() !== \"\") {\r\n        const noteNode = document.createElement(\"span\");\r\n        noteNode.classList.add(\"subNoteText\");\r\n        noteNode.setAttribute(\"data-editable\", \"editSubItem\")\r\n        noteNode.innerHTML = `<div class=\"removeTVSubItem\"></div> ${subItemInput.value}`;\r\n        noteList.appendChild(noteNode);\r\n      }\r\n    })\r\n  },\r\n  deleteSubItem(e){\r\n    if (!e.target.classList.contains(\"removeTVSubItem\")) return;\r\n    const parentContainer = e.target.parentNode;\r\n    const noteValue = {note: parentContainer.innerText, task: parentContainer.childNodes[1].innerText};\r\n    const noteType = parentContainer.childNodes.length;\r\n    const noteFile = {type: noteType == 4 ? \"task\" : \"note\", value: noteType == 4 ? noteValue.task : noteValue.note};\r\n    parentContainer.remove()\r\n  }\r\n};\r\n\r\nconst taskEditing = {\r\n  taskEditGreenLight: false,\r\n  editableTaskIdNo: \"\",\r\n  enableEditing(e) {\r\n    if (e.target.id != \"taskEdit\") return;\r\n    taskEditing.taskEditGreenLight = true;\r\n    taskEditing.editableTaskIdNo = e.target.parentNode.parentNode.dataset.taskid;\r\n    // Save button\r\n    const saveChangesButton = document.createElement(\"button\");\r\n    saveChangesButton.setAttribute(\"type\", \"button\");\r\n    saveChangesButton.setAttribute(\"id\", \"saveChangesButton\");\r\n    saveChangesButton.innerText = `Save`\r\n    document.getElementsByClassName(\"taskView\")[0].appendChild(saveChangesButton);\r\n    // Getting all editable fields.\r\n    const rewritableFields = document.querySelectorAll(\"[data-editable='rewrite']\");\r\n    const selectiveFields = document.querySelectorAll(\"[data-editable='choose']\");\r\n    const subItems = document.querySelectorAll(\"[data-editable='editSubItem']\");\r\n    const subItemsParents = document.querySelectorAll(\"div#taskView-notes label\");\r\n    // Enabling editing for the selected fields.\r\n    rewritableFields.forEach(item => item.classList.add(\"rewriteMe\"));\r\n    selectiveFields.forEach(item =>{\r\n      if (item.classList[0].split(\"-\")[1] == \"group\") {\r\n        const newElement = document.createElement(\"select\");\r\n        newElement.setAttribute(\"id\", \"editGroup\")\r\n        const selectionList = []\r\n        const groupList = document.querySelectorAll(\".project\").forEach( group => group.innerText == item.innerText ? selectionList.push(`<option selected>${group.innerText}</option>`) : selectionList.push(`<option>${group.innerText}</option>`));\r\n        newElement.innerHTML = `${selectionList}`;\r\n        item.replaceWith(newElement)\r\n      }\r\n      else if (item.classList[0].split(\"-\")[1] == \"dueDate\") {\r\n        const newElement = document.createElement(\"input\");\r\n        newElement.setAttribute(\"type\", \"datetime-local\");\r\n        newElement.setAttribute(\"id\", \"editDueDate\")\r\n        item.replaceWith(newElement)\r\n      }\r\n      else if (item.classList[0].split(\"-\")[1] == \"priority\") {\r\n        const newElement = document.createElement(\"select\");\r\n        newElement.setAttribute(\"id\", \"editPriority\")\r\n        const selectionList = [\"urgent\", \"Important\", \"Not Important\"]\r\n        newElement.innerHTML = `${selectionList.map(priority => item.innerText.split(\":\")[1].trim() == priority ? `<option selected>${priority}</option>` : `<option>${priority}</option>`)}`;\r\n        item.replaceWith(newElement)\r\n      }\r\n    });\r\n    subItems.forEach(item => item.classList.add(\"rewriteMe\"));\r\n    subItemsParents.forEach(item => item.addEventListener(\"click\", noDefault));\r\n  },\r\n  disableEditing(e) {\r\n    if (e.target.id != \"saveChangesButton\") return;\r\n    // Getting all editable fields.\r\n    const rewritableFields = document.querySelectorAll(\"[data-editable='rewrite']\");\r\n    const subItems = document.querySelectorAll(\"[data-editable='editSubItem']\");\r\n    const subItemsParents = document.querySelectorAll(\"div#taskView-notes label\");\r\n    const group = document.getElementById(\"editGroup\");\r\n    const dueDate = document.getElementById(\"editDueDate\");\r\n    const priority = document.getElementById(\"editPriority\");\r\n    // Disabling editing for the selected fields.\r\n    rewritableFields.forEach(item => item.classList.remove(\"rewriteMe\"));\r\n    subItems.forEach(item => item.classList.remove(\"rewriteMe\"));\r\n    subItemsParents.forEach(item => item.removeEventListener(\"click\", noDefault));\r\n    // New taskView-group element\r\n    const ogElemG = document.createElement(\"div\");\r\n    ogElemG.classList.add(\"taskView-group\");\r\n    ogElemG.setAttribute(\"data-editable\", \"choose\")\r\n    ogElemG.innerHTML = `<div id=\"taskEdit\" title=\"Edit Task\"></div> ${group.value}`\r\n    group.remove()\r\n    // New taskView-dueDate element\r\n    const ogElemDD = document.createElement(\"div\");\r\n    ogElemDD.classList.add(\"taskView-dueDate\");\r\n    ogElemDD.setAttribute(\"data-editable\", \"choose\")\r\n    ogElemDD.innerHTML = `Due: ${new Date(dueDate.value).toDateString()} ${new Date(\r\n      dueDate.value\r\n    ).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`\r\n    dueDate.remove()\r\n    // New taskView-priority element\r\n    const ogElemP = document.createElement(\"div\");\r\n    ogElemP.classList.add(\"taskView-priority\");\r\n    ogElemP.setAttribute(\"data-editable\", \"choose\")\r\n    ogElemP.innerHTML = `Priority: ${priority.value}`\r\n    priority.remove()\r\n    // Appending all of the new elements\r\n    document.getElementsByClassName(\"taskView\")[0].appendChild(ogElemG);\r\n    document.getElementsByClassName(\"taskView\")[0].appendChild(ogElemDD);\r\n    document.getElementsByClassName(\"taskView\")[0].appendChild(ogElemP);\r\n\r\n    e.target.remove()\r\n  }\r\n}\r\n\r\n/////////Tasks List Eventlisteners\r\nwindow.addEventListener(\"click\", newTaskInfo.getAllInfo);\r\nwindow.addEventListener(\"click\", listItemController.removeItem);\r\nwindow.addEventListener(\"click\", (e) => {\r\n  if (!e.target.classList.contains(\"newTask-addButton\")) return;\r\n  else if (newTaskInfo.greenLight == true) {\r\n    listItemController.populateList();\r\n    listItemController.listOperator();\r\n    newTaskInfo.greenLight = false;\r\n  }\r\n});\r\nwindow.addEventListener(\"click\", listItemController.shiftDomList);\r\n\r\n/////////Tasks View Eventlisteners\r\nwindow.addEventListener(\"click\", taskView.expand);\r\nwindow.addEventListener(\"click\", taskView.showNoteInput);\r\nwindow.addEventListener(\"click\", taskView.deleteSubItem);\r\n\r\n/////////Tasks Editing Eventlisteners\r\nwindow.addEventListener(\"click\", taskEditing.enableEditing);\r\nwindow.addEventListener(\"click\", taskEditing.disableEditing)\r\n"],"names":[],"sourceRoot":""}